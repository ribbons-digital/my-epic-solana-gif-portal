{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","account","fetch","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97bbcf28.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from \"react\";\nimport idl from \"./idl.json\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { clusterApiUrl, Connection, PublicKey } from \"@solana/web3.js\";\nimport { Provider, Program, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"shiang\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// const TEST_GIFS = [\n//   \"https://media.giphy.com/media/8xomIW1DRelmo/giphy.gif\",\n//   \"https://media.giphy.com/media/vBjLa5DQwwxbi/giphy.gif\",\n//   \"https://media.giphy.com/media/rj12FejFUysTK/giphy.gif\",\n//   \"https://media.giphy.com/media/1fj3APLEvaEiA/giphy.gif\",\n// ];\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data. (but new one is created everytime the page refreshes)\n// let baseAccount = Keypair.generate();\n\n// Replace above with below 3 lines\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl(\"devnet\");\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantim wallet found!\");\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n           */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom WalletðŸ‘»\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given.\");\n      return;\n    }\n\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"Gif successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(error);\n      setGifList(null);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () =>\n    gifList === null ? (\n      <div className=\"connected-container\">\n        <button\n          className=\"cta-button submit-gif-button\"\n          onClick={createGifAccount}\n        >\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    ) : (\n      <div className=\"connected-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n          Submit\n        </button>\n        <div className=\"gif-grid\">\n          {/* We use index as the key instead, also, the src is now item.gifLink */}\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt=\"a gif\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n\n  useEffect(() => {\n    window.addEventListener(\"load\", async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">Marvel Universe GIF Portal</p>\n          <p className=\"sub-text\">\n            View your Marvel GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}